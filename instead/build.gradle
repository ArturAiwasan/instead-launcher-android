plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion rootProject.compile_sdk_version
    buildToolsVersion rootProject.build_tools_version

    defaultConfig {
        minSdkVersion rootProject.min_sdk_version
        targetSdkVersion rootProject.compile_sdk_version
        versionCode rootProject.version_code
        versionName rootProject.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_PLATFORM=android-21", "-DCMAKE_BUILD_TYPE=Release",
                        "-DANDROID_ARM_MODE=arm"
                version "3.10.2"
            }
        }
        lintOptions {
          abortOnError false
        }

        consumerProguardFiles "consumer-rules.pro"
    }

    ndkVersion rootProject.ndk_version

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "INSTEAD_VERSION", "\"$rootProject.build_config_instead_version\"")
            ndk {
                debugSymbolLevel = 'FULL'
            }
        }
        debug {
            buildConfigField("String", "INSTEAD_VERSION", "\"$rootProject.build_config_instead_version\"")
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    externalNativeBuild {
        cmake {
            path "src/main/c/CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation project(':core-storage')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.kotlin_coroutines_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task deleteDependencies(type: Delete) {
    delete 'src/main/c/Instead/Instead', 'src/main/c/Lua/Lua'
    delete 'src/main/c/SDL2/SDL2', 'src/main/c/SDL2_image/SDL2_image'
    delete 'src/main/c/SDL2_mixer/SDL2_mixer', 'src/main/c/SDL2_ttf/SDL2_ttf'
    delete 'src/main/c/libiconv/libiconv'
}

task downloadDependencies(dependsOn: deleteDependencies) {
    def Instead = 'a6e9287978c07d910afd5a3c399b493b8ff9ac73'
    def Lua = '5.1.5'
    def SDL2 = '2.0.12'
    def SDL2_image = '2.0.5'
    def SDL2_mixer = '2.0.4'
    def SDL2_ttf = '2.0.15'
    def Iconv = '1.15'

    doLast {
        download {
            src "https://github.com/instead-hub/instead/archive/${Instead}.tar.gz"
            dest new File(buildDir, "instead-${Instead}.tar.gz")
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/instead-${Instead}.tar.gz"))
            into 'src/main/c/Instead/'
        }
        file("src/main/c/Instead/instead-${Instead}").renameTo(file('src/main/c/Instead/Instead'))
        delete("src/main/c/Instead/instead-${Instead}")
        delete("src/main/c/Instead/pax_global_header")

        download {
            src "https://www.lua.org/ftp/lua-${Lua}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/lua-${Lua}.tar.gz"))
            into 'src/main/c/Lua/'
        }
        file("src/main/c/Lua/lua-${Lua}").renameTo(file('src/main/c/Lua/Lua'))
        delete("src/main/c/Lua/lua-${Lua}")

        download {
            src "https://www.libsdl.org/release/SDL2-${SDL2}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2-${SDL2}.tar.gz"))
            into 'src/main/c/SDL2/'
        }
        file("src/main/c/SDL2/SDL2-${SDL2}").renameTo(file('src/main/c/SDL2/SDL2'))
        delete("src/main/c/SDL2/SDL2-${SDL2}")

        download {
            src "https://www.libsdl.org/projects/SDL_image/release/SDL2_image-${SDL2_image}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2_image-${SDL2_image}.tar.gz"))
            into 'src/main/c/SDL2_image/'
        }
        file("src/main/c/SDL2_image/SDL2_image-${SDL2_image}").renameTo(file('src/main/c/SDL2_image/SDL2_image'))
        delete("src/main/c/SDL2_image/SDL2_image-${SDL2_image}")

        download {
            src "https://www.libsdl.org/projects/SDL_mixer/release/SDL2_mixer-${SDL2_mixer}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2_mixer-${SDL2_mixer}.tar.gz"))
            into 'src/main/c/SDL2_mixer/'
        }
        file("src/main/c/SDL2_mixer/SDL2_mixer-${SDL2_mixer}").renameTo(file('src/main/c/SDL2_mixer/SDL2_mixer'))
        delete("src/main/c/SDL2_mixer/SDL2_mixer-${SDL2_mixer}")

        download {
            src "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-${SDL2_ttf}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2_ttf-${SDL2_ttf}.tar.gz"))
            into 'src/main/c/SDL2_ttf/'
        }
        file("src/main/c/SDL2_ttf/SDL2_ttf-${SDL2_ttf}").renameTo(file('src/main/c/SDL2_ttf/SDL2_ttf'))
        delete("src/main/c/SDL2_ttf/SDL2_ttf-${SDL2_ttf}")

        download {
            src "https://ftp.gnu.org/pub/gnu/libiconv/libiconv-${Iconv}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/libiconv-${Iconv}.tar.gz"))
            into 'src/main/c/libiconv/'
        }
        file("src/main/c/libiconv/libiconv-${Iconv}").renameTo(file('src/main/c/libiconv/libiconv'))
        delete("src/main/c/libiconv/libiconv-${Iconv}")
    }
}

task copyLangs(type: Copy) {
    description = 'Copies langs from Instead to assets'
    from 'src/main/c/Instead/Instead/lang/'
    into 'src/main/assets/lang/'
    include '*.ini'
}

task copyThemes(type: Copy) {
    description = 'Copies themes from Instead to assets'
    from 'src/main/c/Instead/Instead/themes/'
    into 'src/main/assets/themes/'
    exclude 'CMakeLists.txt', 'Makefile'
}

task copyStead(type: Copy) {
    description = 'Copies stead folder from Instead to assets'
    from 'src/main/c/Instead/Instead/stead/'
    into 'src/main/assets/stead/'
    exclude '**/CMakeLists.txt', 'Makefile'
}

task cleanAssets(type: Delete) {
    delete 'src/main/assets/lang/', 'src/main/assets/themes/', 'src/main/assets/stead/'
}

preBuild.dependsOn copyLangs, copyThemes, copyStead

afterEvaluate {
    if (project.hasProperty("packageRelease")) {
        packageRelease.finalizedBy(cleanAssets)
    }
    if (project.hasProperty("packageDebug")) {
        packageDebug.finalizedBy(cleanAssets)
    }
    if (project.hasProperty("clean")) {
        clean.finalizedBy(cleanAssets)
    }
}