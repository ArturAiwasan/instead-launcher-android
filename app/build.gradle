apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "org.emunix.insteadlauncher"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 301
        versionName "0.3.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_PLATFORM=android-21", "-DCMAKE_BUILD_TYPE=Release",
                        "-DANDROID_ARM_MODE=arm"
                version "3.10.2"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha3', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'

    // Support libraries
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.11"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.0-alpha"

    // Architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
    kapt "androidx.lifecycle:lifecycle-compiler:2.0.0"
    implementation "androidx.room:room-runtime:2.0.0"
    kapt "androidx.room:room-compiler:2.0.0"
    implementation "androidx.room:room-rxjava2:2.0.0"

    // RxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.4'

    // Network
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Files
    implementation 'commons-io:commons-io:2.6'
}

repositories {
    mavenCentral()
}

task deleteDependencies(type: Delete) {
    delete 'src/main/cpp/Instead/Instead', 'src/main/cpp/Lua/Lua'
    delete 'src/main/cpp/SDL2/SDL2', 'src/main/cpp/SDL2_image/SDL2_image'
    delete 'src/main/cpp/SDL2_mixer/SDL2_mixer', 'src/main/cpp/SDL2_ttf/SDL2_ttf'
    delete 'src/main/cpp/libiconv/libiconv'
}

task downloadDependencies(dependsOn: deleteDependencies) {
    def Instead = '3.2.2'
    def Lua = '5.1.5'
    def SDL2 = '2.0.8'
    def SDL2_image = '2.0.3'
    def SDL2_mixer = '2.0.2'
    def SDL2_ttf = '2.0.14'
    def Iconv = '1.15'

    doLast {
        download {
            src "https://github.com/instead-hub/instead/archive/${Instead}.tar.gz"
            dest new File(buildDir, "instead-${Instead}.tar.gz")
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/instead-${Instead}.tar.gz"))
            into 'src/main/cpp/Instead/'
        }
        file("src/main/cpp/Instead/instead-${Instead}").renameTo(file('src/main/cpp/Instead/Instead'))
        delete("src/main/cpp/Instead/instead-${Instead}")
        delete("src/main/cpp/Instead/pax_global_header")

        download {
            src "https://www.lua.org/ftp/lua-${Lua}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/lua-${Lua}.tar.gz"))
            into 'src/main/cpp/Lua/'
        }
        file("src/main/cpp/Lua/lua-${Lua}").renameTo(file('src/main/cpp/Lua/Lua'))
        delete("src/main/cpp/Lua/lua-${Lua}")

        download {
            src "https://www.libsdl.org/release/SDL2-${SDL2}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2-${SDL2}.tar.gz"))
            into 'src/main/cpp/SDL2/'
        }
        file("src/main/cpp/SDL2/SDL2-${SDL2}").renameTo(file('src/main/cpp/SDL2/SDL2'))
        delete("src/main/cpp/SDL2/SDL2-${SDL2}")

        download {
            src "https://www.libsdl.org/projects/SDL_image/release/SDL2_image-${SDL2_image}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2_image-${SDL2_image}.tar.gz"))
            into 'src/main/cpp/SDL2_image/'
        }
        file("src/main/cpp/SDL2_image/SDL2_image-${SDL2_image}").renameTo(file('src/main/cpp/SDL2_image/SDL2_image'))
        delete("src/main/cpp/SDL2_image/SDL2_image-${SDL2_image}")

        download {
            src "https://www.libsdl.org/projects/SDL_mixer/release/SDL2_mixer-${SDL2_mixer}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2_mixer-${SDL2_mixer}.tar.gz"))
            into 'src/main/cpp/SDL2_mixer/'
        }
        file("src/main/cpp/SDL2_mixer/SDL2_mixer-${SDL2_mixer}").renameTo(file('src/main/cpp/SDL2_mixer/SDL2_mixer'))
        delete("src/main/cpp/SDL2_mixer/SDL2_mixer-${SDL2_mixer}")

        download {
            src "https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-${SDL2_ttf}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/SDL2_ttf-${SDL2_ttf}.tar.gz"))
            into 'src/main/cpp/SDL2_ttf/'
        }
        file("src/main/cpp/SDL2_ttf/SDL2_ttf-${SDL2_ttf}").renameTo(file('src/main/cpp/SDL2_ttf/SDL2_ttf'))
        delete("src/main/cpp/SDL2_ttf/SDL2_ttf-${SDL2_ttf}")

        download {
            src "https://ftp.gnu.org/pub/gnu/libiconv/libiconv-${Iconv}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/libiconv-${Iconv}.tar.gz"))
            into 'src/main/cpp/libiconv/'
        }
        file("src/main/cpp/libiconv/libiconv-${Iconv}").renameTo(file('src/main/cpp/libiconv/libiconv'))
        delete("src/main/cpp/libiconv/libiconv-${Iconv}")
    }
}

task copyLangs(type: Copy) {
    description = 'Copies langs from Instead to assets'
    from 'src/main/cpp/Instead/Instead/lang/'
    into 'src/main/assets/lang/'
    include '*.ini'
}

task copyThemes(type: Copy) {
    description = 'Copies themes from Instead to assets'
    from 'src/main/cpp/Instead/Instead/themes/'
    into 'src/main/assets/themes/'
    exclude 'CMakeLists.txt', 'Makefile'
}

task copyStead(type: Copy) {
    description = 'Copies stead folder from Instead to assets'
    from 'src/main/cpp/Instead/Instead/stead/'
    into 'src/main/assets/stead/'
    exclude '**/CMakeLists.txt', 'Makefile'
}

task cleanAssets(type: Delete) {
    delete 'src/main/assets/lang/', 'src/main/assets/themes/', 'src/main/assets/stead/'
}

preBuild.dependsOn copyLangs, copyThemes, copyStead

afterEvaluate {
    if (project.hasProperty("packageRelease")) {
        packageRelease.finalizedBy(cleanAssets)
    }
    if (project.hasProperty("packageDebug")) {
        packageDebug.finalizedBy(cleanAssets)
    }
    if (project.hasProperty("clean")) {
        clean.finalizedBy(cleanAssets)
    }
}
